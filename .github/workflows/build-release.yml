name: New Server Clean, Build, Deploy, Migrate

on:
  workflow_dispatch: # to manually run this workflow
  
jobs:
  CLEANING-READY:
    name: Clean Ready
    runs-on: ubuntu-latest
    environment: CLEAN
    steps:
      - name: Cleaning Permission okay
        run: echo "Cleaning ready"
  CLEANING:
    name: Clean NEWSERVER
    runs-on: ubuntu-latest
    environment: NEWSERVER
    needs: CLEANING-READY
    steps:
      - name: Cleaning NEWSERVER ftp server
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            [ "$(basename "$(pwd)")" = "${{ secrets.FTP_SERVER }}" ] && rm -rf ./*
          EOF


  BUILD:
    name: Build code
    runs-on: ubuntu-latest
    needs: CLEANING
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup PHP 8.0
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'

      - uses: actions/setup-node@master

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Prepare .env file
        run: |
          sed -i "s/DB_DATABASE=.*/DB_DATABASE=${{ secrets.DB_DATABASE }}/" .env
          sed -i "s/DB_USERNAME=.*/DB_USERNAME=${{ secrets.DB_USERNAME }}/" .env
          sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=${{ secrets.DB_PASSWORD }}/" .env

      - name: Move repofiles to it's Directory
        run: |
          cp -r -f public/uploads/repofiles/* "${{ secrets.REPO_PATH }}/"
          rm -rf public/uploads/repofiles
          
      - name: Generate key
        run: php artisan key:generate

      - name: Generate storage link
        run: php artisan storage:link

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Execute tests (Unit and Feature tests) via PHPUnit
        run: vendor/bin/phpunit

      - name: Zip Repository
        run: |
          zip -r release.zip .
        working-directory: ${{ github.workspace }}

      - name: Upload ZIP Artifact
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: release.zip
          retention-days: 10


  PRODUCTION:
    name: Deploy in TEST
    runs-on: ubuntu-latest
    environment: NEWSERVER
    needs: BUILD
    steps:
      - name: Download ZIP Artifact
        uses: actions/download-artifact@v3
        with:
          name: release
          path: release

      - name: ðŸ“‚ Sync files
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./release/
          exclude: |
            **/.git*
            **/.git*/**

      - name: SSH into the server and unzip release.zip
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            yes | unzip release.zip -d release
          EOF

      - name: Copy .env.example and .env, .htaccess from release directory only for php
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            cp release/.env.example .env.example
            cp release/.env .env
            cp release/.htaccess .htaccess
            rsync -av release/ . #recursively copy files
            #Prepare .env file
            sed -i "s/DB_DATABASE=.*/DB_DATABASE=${{ secrets.DB_DATABASE }}/" .env
            sed -i "s/DB_USERNAME=.*/DB_USERNAME=${{ secrets.DB_USERNAME }}/" .env
            sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=${{ secrets.DB_PASSWORD }}/" .env
          EOF
          
      - name: Remove the 'release' directory and .zip
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            rm -rf release
            rm -rf .git
            rm release.zip
          EOF

            
  MIGRATION-READY:
    name: Migration Ready
    runs-on: ubuntu-latest
    environment: MIGRATE
    #needs: ["CLEANING", "BUILD", "PRODUCTION"]
    steps:
      - name: Migration Permission okay
        run: echo "Migrate ready"

  MIGRATION-NEWSERVER:
    name: Migration in NEWSERVER
    runs-on: ubuntu-latest
    environment: NEWSERVER
    needs: ["MIGRATION-READY", "PRODUCTION"]
    steps:
      - name: Migrating the Database in NEWSERVER
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            php artisan migrate:fresh --force
          EOF
          