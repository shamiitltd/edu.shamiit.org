name: Deploy application in multi-env

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch: # Manually run this workflow

jobs:
  deploy:
    name: Deploy to ${{ matrix.environment }}
    runs-on: ubuntu-latest
    environment: ${{ matrix.environment }}
    timeout-minutes: 600 # Set the maximum job execution time to 10 hours
    strategy:
      matrix:
        environment:
          - TEST
          - QA
          - PROD

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup PHP 8.0
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'

      - uses: actions/setup-node@master

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Prepare .env file
        run: |
          sed -i "s/DB_DATABASE=.*/DB_DATABASE=${{ secrets.DB_DATABASE }}/" .env
          sed -i "s/DB_USERNAME=.*/DB_USERNAME=${{ secrets.DB_USERNAME }}/" .env
          sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=${{ secrets.DB_PASSWORD }}/" .env

      - name: Prepare .php files
        run: |
          echo "${{ vars.INIT_REPO }}" > "${{ secrets.REPO_PATH }}/InitRepository.php"
          echo "${{ vars.INSTALL_REPO }}" > "${{ secrets.REPO_PATH }}/InstallRepository.php"
          echo "${{ vars.LICENSE_REPO }}" > "${{ secrets.REPO_PATH }}/LicenseRepository.php"
          
      - name: Generate key
        run: php artisan key:generate
      - name: Generate storage link
        run: php artisan storage:link
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: vendor/bin/phpunit


      - name: Zip the code
        run: zip -r release.zip .

      - name: Create a Deployment Directory
        run: mkdir deploy

      - name: Move release.zip to Deployment Directory
        run: mv release.zip deploy/

      - name: 📂 Sync files
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./deploy/
          exclude: |
            **/.git*
            **/.git*/**

      - name: Generate SSH Key
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""

      - name: Install SSH key
        run: |
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        env:
          SSH_PRIVATE_KEY: ${{ secrets.RSA_PRIVATE_KEY }}
          
      - name: SSH into the server and unzip settings.zip
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "shami65i@${{ secrets.FTP_SERVER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            yes | unzip release.zip -d release
          EOF

      - name: Copy .env.example and .env, .htaccess from release directory only for php
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "shami65i@${{ secrets.FTP_SERVER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            cp release/.env.example .env.example
            cp release/.env .env
            cp release/.htaccess .htaccess
            rsync -av release/ . #recursively copy files
          EOF
          
      - name: Remove the 'release' directory and .zip
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "shami65i@${{ secrets.FTP_SERVER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            rm -rf release
            rm -rf .git
            rm release.zip
          EOF

      - name: Migrating the Database
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "shami65i@${{ secrets.FTP_SERVER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            php artisan migrate:fresh --force
          EOF
